/* Core */
import { createSlice, type PayloadAction } from "@reduxjs/toolkit";
import { adminAsync, loginAsync, signupAsync, userAsync } from "./thunks";
import { setCookie, getCookie, deleteCookie } from "cookies-next";

/* Instruments */

const initialState: AuthSliceState = {
  user: null,
  responseData: null,
  status: "idle",
  error: null,
  form: "login",
};

export const authSlice = createSlice({
  name: "auth",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setForm: (state, action: PayloadAction<"login" | "signup">) => {
      state.form = action.payload;
    },
    getCookies: (state) => {
      const user = getCookie("user");
      if (user) {
        state.user = JSON.parse(user);
      }
    },
    setResponseData: (state, action: PayloadAction<IResponseData>) => {
      state.responseData = action.payload;
    },
    setStatus: (
      state,
      action: PayloadAction<"idle" | "loading" | "resolved" | "rejected">,
    ) => {
      state.status = action.payload;
    },
    logOut: (state) => {
      state.user = null;
      state.responseData = null;
      deleteCookie("user");
    },
    setError(state, action: PayloadAction<string>) {
      state.error = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.error = null;
        state.status = "loading";
      })
      .addCase(loginAsync.fulfilled, (state, action: any) => {
        state.status = "resolved";
        console.log("action.payload", action.payload);
        const user: User = {
          id: action.payload.user._id,
          username: action.payload.user.username,
          accessToken: action.payload.tokenObj.access,
          role: action.payload.user.isAdmin ? "admin" : "user",
        };
        setCookie("user", JSON.stringify(user));
        state.user = user;
      })
      .addCase(loginAsync.rejected, (state, action: any) => {
        state.status = "rejected";
        state.error = action.error.message ?? "";
      })
      .addCase(signupAsync.pending, (state) => {
        state.error = null;
        state.status = "loading";
      })
      .addCase(signupAsync.fulfilled, (state, action: any) => {
        state.status = "resolved";
        const user: User = {
          id: action.payload.user._id,
          username: action.payload.user.username,
          accessToken: action.payload.tokenObj.access,
          role: action.payload.user.isAdmin ? "admin" : "user",
        };
        setCookie("user", JSON.stringify(user));
        state.user = user;
      })
      .addCase(signupAsync.rejected, (state, action: any) => {
        state.status = "rejected";
        state.error = action.error.message ?? "";
      });
  },
});

/* Types */
export interface AuthSliceState {
  user: User | null;
  responseData: IResponseData | null;
  status: "idle" | "loading" | "resolved" | "rejected";
  error: string | null;
  form: "login" | "signup";
}

export interface User {
  id: string;
  username: string;
  accessToken: string;
  role: "user" | "admin";
}

export interface IResponseData {
  message: string;
}

export const {
  setForm,
  getCookies,
  logOut,
  setError,
  setResponseData,
  setStatus,
} = authSlice.actions;
